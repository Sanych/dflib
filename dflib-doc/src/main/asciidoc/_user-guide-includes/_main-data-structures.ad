== Main Data Structures

Two essential DFLib classes are `Series` and `DataFrame`. `Series` is 1-dimensional array-like object, and `DataFrame`
is a 2-dimensional table-like object. Columns in a DataFrame are stored as Series.

Both DataFrame and Series are _immutable_, so all the operations on them return a new instance. Behind the scenes
shares as much data as possible between instances, so copying these objects does not cause significant performance
degradation, and in turn makes DFLib fully thread-safe, with concurrent operations possible on the same data structure.
Also immutability means that you can have a full snapshot of your data at each step of a transformation, simplifying
debugging and auditing of data pipelines.

=== Series

`Series` is the simplest of the two data structures. You can think of it as a wrapper around an array of values.
Series object is parameterized for the type of data that it holds. So there can be `Series<String>` or a
`Series<LocalDate>`, etc. You can use `Series` to model sequences of data (e.g. timestamps in a time series), etc.

`Series` can be created using static `forData` method on the `Series` interface:

[source,java,indent=0]
----
include::../../java/com/nhl/dflib/docs/SeriesExamples.java[tags=create]
----

----
a
bcd
...
g
4 elements
----
There is a whole category of "primitive" Series that are optimized for memory use and arithmetic operations performance.
There are Series for `int`, `double`, `long` and `boolean` values. E.g.:

[source,java,indent=0]
----
include::../../java/com/nhl/dflib/docs/SeriesExamples.java[tags=createInt]
----

While all of them can pose as "object" Series (e.g. `IntSeries` implements `Series<Integer>`), for efficiency you should
use primitive versions of each operation whenever possible. E.g. `concatInt` instead of just `concat`, etc.

`Series` object defines a number of useful data manipulation and transformation operations, that will be covered in the
following chapters. Also it is very important as a building block of DataFrame.

=== DataFrame