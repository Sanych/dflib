[#printers]
== Printers

When doing data exploration and running data pipelines, it is important to be able to visualize data at every step.
More advanced forms of visualization include charts and diagrams. But the simplest thing you can do is printing
data to the console. Both `DataFrame` and `Series` implement `toString()` method, that will print their contents
as a single line, truncating large data sets in the process, which is good for debugging applications running on a
server.

A more human-friendly form of output is done by using a _tabular_ printer. Here is how to use the default tabular
printer:
[source,java,indent=0]
----
include::../../java/com/nhl/dflib/docs/PrintersExamples.java[tags=printDataFrame_Tabular]
----
It prints the data as follows, displaying at most 6 rows and truncating the rest. Same goes for cell values. Values
longer than 30 chars are also truncated (since they are pretty short in our example, value truncation is not obvious here).
----
col1 col2 col3
---- ---- ----
   0 3334 6668
   1 3335 6669
   2 3336 6670
...
3331 6665 9999
3332 6666    0
3333 6667    0
3334 rows x 3 columns
----
You can change the truncation parameters by creating your own printer:

[source,java,indent=0]
----
include::../../java/com/nhl/dflib/docs/PrintersExamples.java[tags=printDataFrame_Tabular_Custom]
----

<1> Create a printer that displays at most 3 rows and up to 3 characters in each cell.

----
c.. c.. c..
--- --- ---
  0 3.. 6..
  1 3.. 6..
...
3.. 6..   0
3334 rows x 3 columns
----

NOTE: If you are using <<jupyter, Jupyter Notebook>>, all the printers are already setup for you. So if the last
statement in a Jupyter cell is a `DataFrame` or a `Series`, it will be printed as a table in the notebook.