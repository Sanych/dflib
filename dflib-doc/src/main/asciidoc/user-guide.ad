= DFLib Documentation

DFLib stands for "DataFrame Library". It is a lightweight pure Java implementation of a common DataFrame data structure.
With DFLib you get essentially the same data manipulation tools you may be used to in SQL (such as queries and joins),
only you can use them in-memory and over dynamically defined data structures.

DataFrame is ubiquitous in data transformation, analysis and ML fields. There are implementations in Python
(https://pandas.pydata.org/[pandas]), R,
https://spark.apache.org/docs/latest/sql-programming-guide.html#datasets-and-dataframes[Apache Spark], etc.
DFLib project's goal is to provide DataFrame strcuture for regular Java applications. It is a simple library that
works in any Java application and requires no special infrastructure.

== Getting Started with DFLib

Include DFLib in a project. Assuming you are using Maven, start by declaring a "BOM" to have a common version for
multiple DFLib modules:

[source,xml]
----
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.nhl.dflib</groupId>
      <artifactId>dflib-bom</artifactId>
      <version>0.6</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
----

Next include DFLib core as a dependency:
[source,xml]
----
<dependency>
    <groupId>com.nhl.dflib</groupId>
    <artifactId>dflib</artifactId>
</dependency>
----

Create a DataFrame, do some manipulations with it, print the result:
[source,java,indent=0]
----
include::../java/com/nhl/dflib/docs/GettingStartedExamples.java[tags=gettingStarted]
----

When you run this code, console output will look like this:

----
   a    b    c
---- ---- ----
   4    5    6
  10   11   12
...
9994 9995 9996
1666 rows x 3 columns
----

In the following chapters we'll omit the print statement in the code, and will just show the output for a particular
data structure.

== Working in Jupyter Notebook

_If you are not in a mood for setting up Python and Jupyter, you can skip this section all together, and move on to
the next chapters using your Java IDE. But keep in mind that Jupyter is a very powerful data exploration and modeling
tool, and DFLib allows you to use it in Java, without any Python knowledge. In any event you can come back to it later._

While DFLib is a library that runs inside regular Java applications, it also works perfectly in a Jupyter notebook,
which is a very common environment among data scientists, and is usually associated with Python or Scala. Jupyter
Notebook is very visual and allows you to debug each step of your a data
load and transformation pipeline individually without a need to rerun the whole thing. The code developed in notebook
can be later copied and pasted into your application.

=== Installing Jupyter with Java Extensions

* Java version. You will need at least Java 9 for Jupyter, as it requires +jshell+. Java 11 or later is recommended.
* Install Jupyter. Follow Jupyter installation instructions. It requires Python. Out of the variety of installation
options, the authors of this document are using Mac OS, +pyenv+, Python 3.7, and +pip+.
* Install +iJava+ Jupyter "kernel"

=== Work with DFLib in Jupyter

Start Jupyter

----
jupyter notebook
----

The browser opens. Click on "New > Java". In the document cell enter something like this:

[source,java]
----
%maven com.nhl.dflib:dflib:0.6
%maven com.nhl.dflib:dflib-jupyter:0.6

import com.nhl.dflib.jupyter.*;
import com.nhl.dflib.*;

DFLibJupyter.init(getKernelInstance());
DFLibJupyter.setMaxDisplayRows(10);
----

Click "Shift + Return" to execute the cell. If the are no errors, you can start using DFLib API in the following cells.
E.g.:

[source,java]
----
DataFrame df = DataFrame.newFrame("a", "b", "c").foldIntByColumn(-1, 1, 2, 3, 4, 5, 6);

// the result of the last statement in a cell is printed just below it
df
----

=== Keep Notebooks under Version Control

Jupyter places the data generated by the notebook in the notebook itself. This creates a challenge maintaining
notebooks under version control. Assuming you are using Git, you will need to add Git hooks to your project to strip
off the data before commit.

TODO: a recipe for excluding the data

== Main Data Structures

Two main DFLib concepts are `Series` and `DataFrame`. `Series` is 1-dimensional array-like structure, and `DataFrame`
is a 2-dimensional table-like structure. Columns in a DataFrame are stored as Series.

Both DataFrame and Series are
_immutable_, so all the operations on them create a new instance. Behind the scenes DFLib is optimized to avoid bulk
data copy as much as possible, so copying these objects does not cause any performance degradation, and in turn makes
DFLib fully thread-safe, with concurrent operations possible on the same data structure.

=== Series

You can think of `Series` as a wrapper around an array of values. Series object is parameterized for the type of data
it is intended to hold. So there can be `Series<String>` or a `Series<LocalDate>`, etc. You can use `Series` to model
sequences of data (e.g. timestamps in a time series), etc.

`Series` can be created using static `forData` method on the `Series` interface:

[source,java,indent=0]
----
include::../java/com/nhl/dflib/docs/SeriesExamples.java[tags=create]
----

----
a
bcd
...
g
4 elements
----
There is a whole category of "primitive" Series that are optimized for memory use and arithmetic operations performance.
There are Series for `int`, `double`, `long` and `boolean` values. E.g.:

[source,java,indent=0]
----
include::../java/com/nhl/dflib/docs/SeriesExamples.java[tags=createInt]
----

While all of them can pose as "object" Series (e.g. `IntSeries` implements `Series<Integer>`), for efficiency you should
use the primitive version of each operation whenever possible. E.g. `concatInt` instead of just `concat`.

`Series` object defines a number of useful data manipulation and transformation operations, that will be covered in the
following chapters.

=== DataFrame


== Creating Series and DataFrames


== Printers


== Shaping DataFrame, Selecting Rows and Columns


== Sorting Data


== Cleaning up Data


== Concatenating Series and DataFrames


== Joins


== Grouping and Aggregating

=== Working with .csv Files

=== Working with Relational Databases

